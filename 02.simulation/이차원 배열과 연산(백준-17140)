import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
 class Node implements Comparable<Node>{
    int value;
    int apper;
    Node(int value, int apper){
        this.value = value;
        this.apper = apper;
    }
    public int compareTo(Node o){
        int compare = Integer.compare(this.apper, o.apper);
        if(compare == 0) {
            return Integer.compare(this.value, o.value);
        }
        return compare;
    }
}


public class Main {


    static int MAX = 101;
    static int[][] arr =  new int[MAX][MAX];
    static int ans = -1;
    static int MAXR = 2;
    static int MAXC = 2;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");

        int r = Integer.parseInt(s[0])-1;
        int c = Integer.parseInt(s[1])-1;
        int k = Integer.parseInt(s[2]);

        for (int i = 0; i < 3; i++) {
            s = br.readLine().split(" ");
            for (int j = 0; j < 3; j++) {
                arr[i][j] = Integer.parseInt(s[j]);
            }
        }

        for (int i = 0; i <= 100; i++){
            if(arr[r][c] == k) {
                ans = i;
                break;
            }

            if(MAXR >= MAXC){
                // R 연산
                arr = solveR();
            }else {
                // C 연산
                arr = solveC();
            }
        }

     System.out.println(ans);

    }

    public static int[][] solveR(){
         int[][] board = new int[MAX][MAX];
        MAXC = 0;
        for (int i = 0; i <= 100; i++) {
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int j = 0; j <= 100; j++) {
                // 등장횟수 계산
                int key = arr[i][j];
                if(key == 0) continue;
                map.put(key, map.getOrDefault(key, 0) + 1);
            }
            ArrayList<Node> list = new ArrayList<>();
            for (Map.Entry<Integer, Integer> et : map.entrySet()) {
                list.add(new Node(et.getKey(), et.getValue()));
            }
            list.sort(null);
            int t = 0;
            for (int j = 0; j < list.size(); j++) {
                board[i][t++] = list.get(j).value;
                board[i][t++] = list.get(j).apper;
                MAXR = i;
            }
            MAXC = Math.max(MAXC, t-1);
        }

        return board;
    }


    public static int[][] solveC(){
         int[][] board = new int[MAX][MAX];
        MAXR = 0;
        for (int j = 0; j <= 100; j++) {
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i <= 100; i++) {
                // 등장횟수 계산
                int key = arr[i][j];
                if(key == 0) continue;
                map.put(key, map.getOrDefault(key, 0) + 1);
            }
            ArrayList<Node> list = new ArrayList<>();
            for (Map.Entry<Integer, Integer> et : map.entrySet()) {
                list.add(new Node(et.getKey(), et.getValue()));
            }
            list.sort(null);
            int t = 0;
            for (int i = 0; i < list.size(); i++) {
                board[t++][j] = list.get(i).value;
                board[t++][j] = list.get(i).apper;
                MAXC = j;
            }

            MAXR = Math.max(MAXR, t-1);
        }

        return board;
    }
}
