import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static int[] arr;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        int n =  Integer.parseInt(br.readLine());
        arr = new int[n];
        int sum = 0;
        // 가장 많이 나타나는 값
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(br.readLine());
            sum += arr[i];
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a ,b) -> {
            if(a[1] == b[1]) {
                // 등장 횟수가 같다면 값이 작은 순서먼저 넣기
                return a[0] - b[0];
            }
            return b[1] - a[1];
        });
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            Integer key = entry.getKey();
            Integer value = entry.getValue();
            pq.add(new int[]{key, value});
        }
        Arrays.sort(arr);


        // 산술평균
        int round = (int)Math.round((double) sum / n);
        sb.append(round).append("\n");

        // 중앙 위치
        int mid = n/2;
        sb.append(arr[mid]).append("\n");


        // 최빈값
        if(pq.size() == 1) {
            sb.append(pq.poll()[0]).append("\n");
        } else {
            int[] firstArr = pq.poll();
            int[] secdArr = pq.poll();
            if(firstArr[1] == secdArr[1] ) {
                sb.append(secdArr[0]).append("\n");
            } else {
                sb.append(firstArr[0]).append("\n");
            }

        }

        // 범위
        int range = Math.abs(arr[0]-arr[n-1]);
        sb.append(range).append("\n");

        System.out.println(sb);
    }


}
