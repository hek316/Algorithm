import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static int N;
    static int[][] apple;
    static int[][] board;
    static final int L = 0, D = 1;
    static Queue<int[]> timeQueue = new ArrayDeque<>();
    static Queue<int[]> queue = new ArrayDeque<>();
    static int[][] dir ={ {0,1}, {1,0} , {0, -1}, {-1, 0}};
    static int seconds = 0;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N =  Integer.parseInt(br.readLine());
        apple = new int[N][N];
        board = new int[N][N];

        int  t = Integer.parseInt(br.readLine());
        while (t-- > 0) {
            String[] input = br.readLine().split(" ");
            int a = Integer.parseInt(input[0]) -1;
            int b = Integer.parseInt(input[1]) -1;
            apple[a][b] = 2;
        }

        t = Integer.parseInt(br.readLine());
        while (t-- > 0) {
            String[] input = br.readLine().split(" ");
            int a = Integer.parseInt(input[0]);
            if(input[1].equals("L")){
                timeQueue.add(new int[]{a, L});
            } else {
                timeQueue.add(new int[]{a, D});
            }
        }
        queue.offer(new int[]{0,0});
        move(0,0,0);
        System.out.println(seconds);
    }

    public static void move(int x, int y, int curD ){
        seconds++;
        // 앞으로 이동
        int nx = x + dir[curD][0];
        int ny = y + dir[curD][1];
        if(nx >= 0 && nx < N && ny >=0 && ny < N) {
            if(board[nx][ny] == 1) { // 자신의 몸에 부딪힘
                return;
            }
            board[nx][ny] = 1;
            if(apple[nx][ny]== 2) {
                // 사과가 있는 경우
                apple[nx][ny] = 0;
            } else {
                // 사과가 없는 경우
                // 꼬리 줄이기
                int[] tail = queue.poll();
                board[tail[0]][tail[1]] = 0;

            }
            queue.offer(new int[]{nx,ny});

        } else {
            // 벽에 붙딪힘
            return;
        }
        //  게임 시작 시간으로부터 X초가 끝난 뒤 방향 회전
        if(!timeQueue.isEmpty() &&seconds == timeQueue.peek()[0]) {
            int[] t = timeQueue.poll();
            // 방향 바꿔 주기
            if(t[1] == L) {
                // 왼쪽 회전
                curD = (curD+3) %4;
            } else {
                //오른쪽 회전
                curD = (curD+1) %4;
            }
        }

        move(nx, ny, curD );

    }


}
