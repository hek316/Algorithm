import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

// 구현
// 회전정하기
// 뱀의 몸통 움직이기
public class Main {
    static int[][] arr;
    static int[] dx = {-1, 0, 1, 0}; // 동서남북
    static int[] dy = {0, +1, 0, -1};

    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(br.readLine());
        arr = new int[n+1][n+1];
        int apple = Integer.parseInt(br.readLine());
        for(int i=0; i<apple; i++){
            String[] s = br.readLine().split(" ");
            int x = Integer.parseInt(s[0]);
            int y = Integer.parseInt(s[1]);
            arr[x][y] = 1;
        }

        int l = Integer.parseInt(br.readLine());
        int[] seconds = new int[10001];
        int[] dr = new int[10001];
        for(int i=0; i<l; i++){
            String[] s = br.readLine().split(" ");
            int sec = Integer.parseInt(s[0]);
            seconds[sec] = 1;
            if(s[1].equals("L")){
                dr[sec] = -1;
            }else {
                dr[sec] = +1;
            }
        }

        int curX = 1;
        int curY = 1;
        int curD = 1; // 처음 시작 방향 : 동쪽
        int time = 0;
        // 뱀의 몸통 좌표
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{1,1});
        arr[curX][curY]= 3;
        while(true){
           if(seconds[time] == 1){
               if(dr[time] == -1){ // 왼쪽 회전
                   curD = ((curD -1 + 4) % 4) ;
               } else { // 오른쪽 회전
                   curD = ((curD +1) % 4);
               }
           }
           int nextX = curX + dx[curD];
           int nextY = curY + dy[curD];
           time++;

           // 탈출조건 - 벽에 부딪침.
           if(nextX <=0 || nextX >n || nextY <=0 || nextY >n ){
               break;
           }
           //  자신의 몸에 부딪침
           if(arr[nextX][nextY] == 3){
               break;
           }

           if(arr[nextX][nextY] != 1) { // 사과가 아닐때 - 꼬리 부분 지워주기
               if (!queue.isEmpty()) {
                   int[] tail = queue.poll();
                   arr[tail[0]][tail[1]] = 0;
               }
           }
           queue.add(new int[]{nextX, nextY});
            arr[nextX][nextY] = 3;
           curX = nextX;
           curY = nextY;
       }
        System.out.println(time);
    }
}
