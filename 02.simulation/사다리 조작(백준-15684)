import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static int min = 5;
    static int n;
    static int m;
    static int h;
    static int[][] arr;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String[] s = br.readLine().split(" ");
        n = Integer.parseInt(s[0]);
        m = Integer.parseInt(s[1]);
        h = Integer.parseInt(s[2]);
        arr = new int[h+1][n+1];
        for (int i = 0; i < m; i++) {
            s = br.readLine().split(" ");
            int x = Integer.parseInt(s[0]);
            int y = Integer.parseInt(s[1]);
            arr[x][y] = -1;
            arr[x][y+1] = 1;
        }
        combi( 0, 1);
        System.out.println(min == 5 ? -1 : min);

    }

    // 가로 선 그리기
    public static void combi(int cnt, int curi) {
        if(cnt >= min || cnt > 3) {
            return;
        }

        boolean result = true;
        // 가로 횡단
        for (int j = 1; j <= n; j++) {
            if(!check(j)) {
                result = false;
                break;
            }
        }

        if(result) {
            min = Math.min(min, cnt);
        }

        for (int i = curi; i <= h; i++) {
            for (int j = 1; j <= n-1; j++) {
                if(arr[i][j] ==0 && arr[i][j+1] == 0) {
                    arr[i][j] = -1;
                    arr[i][j+1] = 1;
                    combi( cnt+1, i);
                    arr[i][j] = 0;
                    arr[i][j+1] = 0;
                }
            }
        }
    }

    public static boolean check(int curj) {
        int startj = curj;
        for (int i=1; i<=h; i++) {
            // 사다리가 있는 경우
            if(arr[i][curj]!=0) {
                // 왼쪽 이동
                if(arr[i][curj] == 1) {
                    curj--;
                } else {
                    // 오른쪽 이동
                    curj++;
                }
            }
        }
        if(startj == curj) {
            return true;
        }
        return false;
    }
}
