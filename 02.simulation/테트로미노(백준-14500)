import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static int[][] arr;
    static int[][] dir = {{0, 1},  {0, -1}, {1, 0}, {-1, 0}};
    static int ans = 0;
    static boolean[][] visit;
    static int n;
    static int m;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
         n = Integer.parseInt(s[0]);
         m = Integer.parseInt(s[1]);
        arr = new int[n][m];
        visit = new boolean[n][m];
        for (int i = 0; i < n; i++) {
            s = br.readLine().split(" ");
            for (int j = 0; j < m; j++) {
                arr[i][j] = Integer.parseInt(s[j]);
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                visit[i][j] = true;
                dfs (i , j, 1, arr[i][j]);
                visit[i][j] = false;
            }
        }
        System.out.println(ans);

    }

    public static void dfs (int x , int y, int cnt, int sum) {
        if(cnt == 4) {
            ans = Math.max(ans, sum);
            return;
        }
        for (int i=0; i<4; i++) {
            int nx = x + dir[i][0];
            int ny = y + dir[i][1];
            if( nx >=0 && nx < n && ny >=0 && ny < m && visit[nx][ny] == false) {
                if(cnt == 2 ) {
                    visit[nx][ny] = true;
                    dfs(x, y, cnt+1 , sum + arr[nx][ny]);
                    visit[nx][ny] = false;
                }

                visit[nx][ny] = true;
                dfs(nx, ny, cnt+1 , sum + arr[nx][ny]);
                visit[nx][ny] = false;


            }
        }
    }


}
