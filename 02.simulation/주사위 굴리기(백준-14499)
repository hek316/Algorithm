import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;


public class Main {

    static int[][] dir = {{0, 0},{0, +1}, {0, -1}, {-1, 0}, {+1, 0}};

    static int n;
    static int m;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String[] s = br.readLine().split(" ");
        n = Integer.parseInt(s[0]);
        m = Integer.parseInt(s[1]);
        int x = Integer.parseInt(s[2]);
        int y = Integer.parseInt(s[3]);
        int k = Integer.parseInt(s[4]);

        int[] dice = new int[7];

        int[][] arr = new int[n][m];
        for (int i = 0; i < n; i++) {
            s = br.readLine().split(" ");
            for (int j = 0; j < m; j++) {
                arr[i][j] = Integer.parseInt(s[j]);
            }
        }
        StringBuilder sb = new StringBuilder();

        s = br.readLine().split(" ");
        for (int i=0; i<k; i++) {

            int t = Integer.parseInt(s[i]);
            int nx = x + dir[t][0];
            int ny = y + dir[t][1];
            int[] tmp = new int[7];
            for(int j=1; j<=6; j++) {
                tmp[j] = dice[j];
            }
            if(checkRange(nx, ny)) {
                if(t == 1) {
                    // 동쪽
                    dice[1] = tmp[4];
                    dice[3] = tmp[1];
                    dice[4] = tmp[6];
                    dice[6] = tmp[3];
                } else if (t == 2) {
                    // 서쪽
                    dice[1] = tmp[3];
                    dice[3] = tmp[6];
                    dice[4] = tmp[1];
                    dice[6] = tmp[4];
                } else if (t == 3) {
                    // 북쪽
                    dice[1] = tmp[5];
                    dice[2] = tmp[1];
                    dice[5] = tmp[6];
                    dice[6] = tmp[2];
                } else if (t == 4) {
                    // 남쪽
                    dice[1] = tmp[2];
                    dice[2] = tmp[6];
                    dice[5] = tmp[1];
                    dice[6] = tmp[5];
                }
                if(arr[nx][ny] == 0) {
                    // 주사위 바닥면 복사
                    arr[nx][ny] = dice[6];
                } else {
                    // 바닥면을 주사위에 복사 후 바닥면 0
                    dice[6] =  arr[nx][ny];
                    arr[nx][ny] = 0;
                }
                // 이동
                x = nx;
                y = ny;
                sb.append(dice[1]).append("\n");

            }
        }
        System.out.println(sb);

    }

    public static boolean checkRange(int i, int j) {
        if(i>=0 && i<n && j>=0 && j < m) {
            return true;
        }
        return false;
    }

}

