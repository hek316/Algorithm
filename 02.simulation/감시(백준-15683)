import java.io.*;
import java.util.*;

class Main {

    static class CCTV {
        int x, y, type;
        CCTV(int x, int y, int type) {
            this.x = x;
            this.y = y;
            this.type = type;
        }
    }

    static int n, m, MIN = Integer.MAX_VALUE;
    static int[][] dir = {{-1, 0}, {0, +1}, {+1, 0}, {0, -1}};
    static int[][] cctvDir = {{0}, {1}, {1, 3}, {0, 1}, {0, 1, 3} , {0, 1, 2, 3}};
    static ArrayList<CCTV> list = new ArrayList<>();
    static final int wall = 6;
    static int[][] arr;
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
        n = Integer.parseInt(s[0]);
        m = Integer.parseInt(s[1]);
        arr = new int[n][m];


        for (int i = 0; i < n; i++) {
            s = br.readLine().split(" ");
            for (int j = 0; j < m; j++) {
                arr[i][j] = Integer.parseInt(s[j]);
                if (arr[i][j] != 0 && arr[i][j] != wall) {
                    list.add(new CCTV(i, j, arr[i][j]));
                }
            }
        }

        boolean[][] visited = new boolean[n][m];
        dfs(0, visited);


        System.out.println(MIN);
    }

    public static void dfs(int idx, boolean[][] visited) {
        if(idx == list.size()) {
            // cctv 리스트 수
            check(arr, visited);
//            for (int i = 0; i < n; i++) {
//                System.out.println(Arrays.toString(visited[i]));
//            }
//            System.out.println("//////////");
            return;
        }

        for (int i = 0; i < 4; i++) { // 90 도 회전
            boolean[][] cpVisited = deepCopy(visited);
            CCTV cctv1 = list.get(idx);
            for (int j = 0; j < cctvDir[cctv1.type].length; j++) { // cctv
                int x = cctv1.x;
                int y = cctv1.y;
                int curType = (cctvDir[cctv1.type][j] + i)%4;
                while(true) {
                    int nx = x + dir[curType][0];
                    int ny = y + dir[curType][1];
                    if(nx >= 0 && nx < n && ny >= 0 && ny < m && arr[nx][ny] != wall){
                        cpVisited[nx][ny] = true;
                        x = nx;
                        y = ny;
                    } else {
                        // 범위 초과  , 벽
                        break;
                    }
                }
            }
            dfs(idx+1, cpVisited);
        }
    }


    public static boolean[][] deepCopy(boolean[][] visited) {
        boolean[][] copy = new boolean[n][m];
        for (int i = 0; i < n; i++) {
               copy[i] = visited[i].clone();
        }
        return copy;
    }

    public static void check(int[][] arr, boolean[][] visited) {
        int count = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (arr[i][j] == 0 && !visited[i][j]) {
                    // 사각지대 구하기
                    count++;
                }
            }
        }
        MIN = Math.min(MIN, count);
    }
}
