import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
class Horse{
    int x;
    int y;
    int dir;

    public Horse(int x, int y, int dir) {
        this.x = x;
        this.y = y;
        this.dir = dir;
    }
}

public class Main {


    static int n;
    static int k; // 말의 개수

    static int[][] board;
    static Horse[] horse; // 말의 다음 턴

    static ArrayList<Integer>[][] state;

    static final int WHITE = 0, RED = 1, BLUE = 2;
    static int[][] dr = {{0,0} , {0, +1}, {0, -1}, {-1, 0}, {+1, 0}};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String[] s = br.readLine().split(" ");
        n = Integer.parseInt(s[0]);
        k = Integer.parseInt(s[1]);
        horse = new Horse[k];

        board = new int[n][n];
        state = new ArrayList[n][n];

        for (int i = 0; i < n; i++) {
            s = br.readLine().split(" ");
            for (int j = 0; j < n; j++) {
                state[i][j] = new ArrayList();
                board[i][j] = Integer.parseInt(s[j]);
            }
        }

        // 말이 중복될 경우 순서를 바꿔야 함
        for (int i = 0; i < k; i++) {
            s = br.readLine().split(" ");
            int x = Integer.parseInt(s[0]) -1;
            int y = Integer.parseInt(s[1]) -1;
            int dir = Integer.parseInt(s[2]);
            horse[i] = new Horse(x, y, dir);
            state[x][y].add(i);
        }

        System.out.println(gameStart());

    }

    static int gameStart() {
        int turn = 0;
        while (true) {
            turn++;
            if(turn > 1000) return -1;
            for (int i = 0; i < k; i++) {

                Horse cur = horse[i];

                int x = cur.x;
                int y = cur.y;

                // 가장 아래쪽 말이 아니라면 pass
                if(state[x][y].get(0) != i){
                    continue;
                }

                int nx = x + dr[cur.dir][0];
                int ny = y + dr[cur.dir][1];


                if(!checkRange(nx, ny)  || board[nx][ny] == BLUE ){
                    // 파란색 또는 가장자리 방향 바꾸기
                        cur.dir = chageDir(cur.dir);
                        // 방향 바꾸기
                        nx = x + dr[cur.dir][0];
                        ny = y + dr[cur.dir][1];
                }

                // 방향을 반대로 한 후에 이동하려는 칸이 파란색인 경우
                if(!checkRange(nx, ny) || board[nx][ny] == BLUE ){
                    continue;
                } else if (board[nx][ny] == RED){
                    // 빨간색인 경우
                    // 순서를 반대로 모든 말이 이동
                    for (int j = state[x][y].size() -1; j >=0  ; j--) {
                        int temp = state[x][y].get(j);
                        state[nx][ny].add(temp);
                        horse[temp].x = nx;
                        horse[temp].y = ny;

                    }
                    state[x][y].clear();
                } else {
                    // 말이 이동하려는 칸이 하얀색인 경우
                    for (int j = 0; j < state[x][y].size(); j++) {
                        int temp = state[x][y].get(j);
                        state[nx][ny].add(temp);
                        horse[temp].x = nx;
                        horse[temp].y = ny;
                    }
                    state[x][y].clear();
                }

                // 이동한 곳에 말이 4개 이상 있는가?
                if(state[nx][ny].size() >= 4){
                    return turn;
                }

            }
        }
    }

    static boolean checkRange(int nx, int ny){
        if(nx < n && ny < n && nx >=0 && ny >=0){
            return true;
        }
        return false;
    }

    static int chageDir(int dir){
        if(dir == 1) {
            dir = 2;
        } else if(dir == 2) {
            dir = 1;
        } else if(dir == 3) {
            dir = 4;
        } else if(dir == 4) {
            dir = 3;
        }
        return dir;
    }

}
