import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {


    static int r;
    static int c;
    static int acR = 0;
    static int acC = 0;
    static int[][] dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String[] s = br.readLine().split(" ");
        r = Integer.parseInt(s[0]);
        c = Integer.parseInt(s[1]);
        int k = Integer.parseInt(s[2]);

        int[][] arr = new int[r][c];

        for (int i = 0; i < r; i++) {
            s = br.readLine().split(" ");
            for (int j = 0; j < c; j++) {
                arr[i][j] = Integer.parseInt(s[j]);
                if (arr[i][j] == -1) {
                    acR = i;
                    acC = j;
                }
            }
        }
        acR--;
        while (k-- > 0) {
            arr = spread(arr);
            rotate(acR, acC, arr);
        }

        int sum  = 0;

        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                // 공기 청정기 skip
                if (arr[i][j] == -1) continue;
                sum += arr[i][j];
            }
        }

        System.out.println(sum);
    }

    // 미세먼지 확산
    public static int[][] spread(int[][] arr) {
        int[][] board = new int[r][c];
        for (int i=0; i<r; i++) {
            for (int j = 0; j < c; j++) {
                if(arr[i][j] == -1) continue;
                if(arr[i][j] == 0) continue;
                int cnt = 0;
                int tmp = arr[i][j]/5;
                for (int k=0; k<4; k++) {
                    int nx = i + dir[k][0];
                    int ny = j + dir[k][1];
                    if(nx >= 0 &&  nx < r && ny >= 0 && ny < c && arr[nx][ny] != -1) {
                        cnt++;
                        board[nx][ny] += tmp;
                    }
                }
                arr[i][j] -= cnt*tmp;
            }
        }

        for (int i=0; i<r; i++) {
            for (int j = 0; j < c; j++) {
                board[i][j] += arr[i][j];
            }
        }

        return board;

    }

    // 순환
    public static void rotate(int acR, int acC, int[][] arr) {
        rotateReverseClock(acR, acC, arr);
        rotateClock(acR+1, acC, arr);
    }
    // 반시계 방향 회전
    public static void rotateReverseClock(int acR, int acC, int[][] arr) {

        // 아래쪽 이동
        for (int i = acR -1; i>=1; i--) {
            arr[i][0] = arr[i-1][0];
        }

        // 왼쪽 이동
        for (int j=0; j <= c-2; j++) {
            arr[0][j] = arr[0][j+1];
        }

        // 위쪽 이동
        for (int i = 0; i <= acR -1; i++) {
            arr[i][c-1] = arr[i+1][c-1];
        }

        // 오른쪽 이동
        for (int i = c-1; i >= 2; i--) {
            arr[acR][i] = arr[acR][i-1];
        }
        arr[acR][1] = 0;

    }
    // 시계 방향 회전
    public static void rotateClock(int acR, int acC, int[][] arr) {

        int tmp = arr[acR][c-1];
        // 오른 쪽 이동
        for (int j=c-1; j>=1; j--) {
            if(arr[acR][j-1] == -1) {
                arr[acR][j] = 0;
            } else {
                arr[acR][j] =  arr[acR][j-1];
            }
        }

        // 아래쪽 이동
        int tmp2 = arr[r-1][c-1];
        for (int i = r-1; i > acR + 1 ; i--) {
            arr[i][c-1] = arr[i-1][c-1];
        }
        arr[acR + 1][c-1] = tmp;

        // 왼쪽 이동
        tmp = arr[r-1][0];
        for (int j=0; j<c-2; j++) {
            arr[r-1][j] = arr[r-1][j+1];
        }
        arr[r-1][c-2] = tmp2;
        // 위쪽 이동
        for (int i=acR; i<r -1;  i++) {
            if(arr[i][0] == -1) continue;
            arr[i][0] = arr[i+1][0];
        }
        arr[r-2][0] = tmp;

    }
}

