import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;

class Main {

    static int ans;
    static int R;
    static int C;
    static int T;
    static int[][] arr;
    static int[] dx = {-1, +1, 0, 0};
    static int[] dy = {0,0, -1, +1};

    // 하 -> 우 -> 상 -> 좌
    static int[][] rotateColckReverse = {{+1, 0}, {0, 1},{-1 , 0}, { 0, -1}};

    // 상 -> 우 -> 하 ->  좌
    static int[][] rotateColck = {{-1, 0}, {0, +1},{1 , 0}, {0, -1}};


    public static void main(String[] args) throws Exception {


        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
        R = Integer.parseInt(s[0]);
        C = Integer.parseInt(s[1]);
        T = Integer.parseInt(s[2]);

        arr = new int[R][C];

        for (int i = 0; i < R; i++) {
            s = br.readLine().split(" ");
            for (int j = 0; j < C; j++) {
                arr[i][j] = Integer.parseInt(s[j]);
            }
        }

        // 미세먼지 확산
        // 회전
        while (T-- > 0){
            spread();
            rotate(0, rotateColckReverse);
            rotate(R-1, rotateColck);
        }

        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if(arr[i][j] == -1) continue;
                ans += arr[i][j];
            }
        }


        System.out.println(ans);




    }

    static public void spread() {
        // 확산은 미세먼지가 있는 모든 칸에서 동시에 일어난다
        // 동시에 일어나니 칸을 복사해서 한번에 반영해야함
        int[][] board = new int[R][C];
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if(arr[i][j] == -1 || arr[i][j] == 0) continue;
                int cnt = 0;
                int dust = arr[i][j]/5;

                for (int k = 0; k < 4; k++) {
                    int nx = i + dx[k];
                    int ny = j + dy[k];
                    if(isValid(nx, ny) && arr[nx][ny] != -1) {
                        cnt++;
                        board[nx][ny]+= dust;
                    }
                }
                arr[i][j] -= dust*cnt;
            }
        }

        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if(arr[i][j] == -1) continue;
                arr[i][j] += board[i][j] ;
            }
        }

    }

    static boolean isValid(int x, int y){
        if(x>=0 && y >=0 && x < R && y < C) return true;
        return false;
    }

    // rotation
    static void rotate(int start, int[][] rotate){
        int previousValue = arr[start][0];
        int idx = 0;

        int curX = start;
        int curY = 0;


        while (true){
            int nx = curX + rotate[idx][0];
            int ny = curY + rotate[idx][1];

            if(!isValid(nx, ny)){
                idx++;
                if(idx == 4) break;
                continue;
            }

            // 공기 청정기와 만나는 경우
            if(arr[nx][ny] == -1) {
                curX = nx;
                curY = ny;
                idx++;
                previousValue = 0;
                continue;
            }

            int tmp = arr[nx][ny];
            arr[nx][ny] = previousValue;
            previousValue = tmp;

            curX = nx;
            curY = ny;

        }
    }



}


