import java.io.BufferedReader;
import java.io.IOException;
import java.util.*;

public class Main {

    static int n;
    static int m;
    static int[][] arr;
    static int[][]  dr = {{0,-1}, {-1, 0}, {1, 0}, {0,1}};
    static boolean[][] visited;
    static int max = 0;
    static Queue<int[]> q = new LinkedList<>();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new java.io.InputStreamReader(System.in));

        String[] s = br.readLine().split(" ");
        n = Integer.parseInt(s[0]);
        m = Integer.parseInt(s[1]);



        arr = new int[n][m];
        visited = new boolean[n][m];

        for(int i = 0; i < n; i++){
            String[] s1 = br.readLine().split(" ");
            for(int j = 0; j < m; j++){
                arr[i][j] = Integer.parseInt(s1[j]);
                if(arr[i][j] == 2) {
                    q.add(new int[]{i, j});
                }
            }
        }



        wall(0);
        System.out.println(max);

    }

    public static void wall(int cnt) {
        if(cnt == 3) {
            Queue<int[]> copyQ = new LinkedList<>(q);
            // 바이러스 퍼뜨리기
            int[][] board = spread(copyQ);
            max  = Math.max(count(board), max);
            return;
        }


        for(int i=0; i<n; i++) {
            for (int j=0; j<m; j++) {
                if(arr[i][j] == 0 && !visited[i][j]){
                    arr[i][j] = 1;
                    visited[i][j] = true;
                    wall(cnt+1);
                    arr[i][j] = 0;
                    visited[i][j] = false;
                }
            }
        }
    }

    public static  int[][] spread(Queue<int[]> q){
        int[][] board = new int[n][m];
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                board[i][j] = arr[i][j];
            }
        }
        while(!q.isEmpty()) {
            int[] t = q.poll();
            for (int i=0; i<4; i++) {
                int nx  = t[0] + dr[i][0];
                int ny  = t[1] + dr[i][1];
                if(nx >=0 && ny >= 0 && nx < n && ny <  m && board[nx][ny] == 0 ) {
                    board[nx][ny] =2;
                    q.add(new int[]{nx, ny});
                }
            }
        }
        return board;
    }

    public static  int count(int[][] board) {
        int safe = 0;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(board[i][j] == 0 ) safe++;
            }
        }
        return safe;
    }


}
