import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Main {

    static int[][] arr;
    static int n;
    static int m;

    static int[][] dir = {{-1, 0}, {0, +1} , {+1, 0}, {0, -1}};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
         n = Integer.parseInt(s[0]);
         m = Integer.parseInt(s[1]);
        arr = new int[n][m];

        s = br.readLine().split(" ");
        int curX = Integer.parseInt(s[0]);
        int curY = Integer.parseInt(s[1]);
        int curD = Integer.parseInt(s[2]);


        for (int i = 0; i < n; i++) {
            String[] s1 = br.readLine().split(" ");
            for (int j = 0; j < m; j++) {
                arr[i][j] = Integer.parseInt(s1[j]);
            }
        }
        boolean check = true;
        int cnt = 0;
        while (check) {

            if(arr[curX][curY] == 0) {
                // 현재 칸 청소
                arr[curX][curY] = 2;
                cnt++;
            }
            boolean isWall = true; // 사방이 벽인 경우 false
            // 4칸 중 청소되지 않은 빈칸이 있는 경우
            for (int i = 0; i < 4; i++) {
                // 반시계 방향으로 90  회전
                 curD = (curD + 3) % 4;

                int nx = curX + dir[curD][0];
                 int ny = curY + dir[curD][1];
                if(nx >= 0 && nx < n && ny >= 0 && ny < m) {
                     if(arr[nx][ny] == 0) {
                         isWall = false;
                         // 바라보는 방향을 기준으로 앞쪽 칸이 청소되지 않은 빈 칸인 경우 한 칸 전진한다.
                         curX = nx;
                         curY = ny;
                         break;
                     }
                 }
            }
            if (isWall) {
                //현재 칸의 주변
                //$4$칸 중 청소되지 않은 빈 칸이 없는 경우
                int nx = curX - dir[curD][0];
                int ny = curY - dir[curD][1];
                if(nx >= 0 && nx < n && ny >= 0 && ny < m) {
                    if(arr[nx][ny] == 1) {
                        // 후진 불가능한 경우
                        check = false;
                    } else {
                        curX = nx;
                        curY = ny;
                    }
                } else {
                    check = false;
                }

            }

        }
        System.out.println(cnt);
    }

}
