class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i<candidates.length; i++) {
            List<Integer> cur = new ArrayList<>();
            cur.add(candidates[i]);
            find(candidates, target, candidates[i], result, cur, i);
        }

        return result;
    }

    public void find(int[] candidates, int target, int sum, List<List<Integer>> result, List<Integer> cur, int idx){
      //  System.out.println(sum);
      //  System.out.println(cur);
        if(sum == target) {
            result.add(new ArrayList<>(cur));
            return;
        }
        if(sum > target || idx == candidates.length) return;

        // pick
        cur.add(candidates[idx]);
        find(candidates, target, sum + candidates[idx], result, cur, idx);
        cur.removeLast();

        // not pick
        find(candidates, target, sum, result, cur, idx+1);

    }
}
