import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;


public class Main {
    static ArrayList<Integer>[] list;
    static boolean[] visited;
    static StringBuilder sb = new StringBuilder();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
        int n = Integer.parseInt(s[0]);
        int m = Integer.parseInt(s[1]);
        int start = Integer.parseInt(s[2]);
        list = new ArrayList[n+1];
        visited = new boolean[n+1];
        for (int i = 1; i <= n; i++) {
            list[i] = new ArrayList<>();
        }

        for (int i = 0; i < m; i++) {
            s = br.readLine().split(" ");
            int u = Integer.parseInt(s[0]);
            int v = Integer.parseInt(s[1]);
            list[u].add(v);
            list[v].add(u);
        }

        for (int i = 1; i <= n; i++) {
            Collections.sort(list[i]);
        }

        dfs(start);
        visited = new boolean[n+1];
        sb.append("\n");
        bfs(start);
        System.out.println(sb);

    }

    public static void dfs(int cur) {
        sb.append(cur).append(" ");
        visited[cur] = true;
        for (int c : list[cur]) {
            if(!visited[c]) {
                dfs(c);
            }
        }
    }

    public static void bfs(int cur) {
        Queue<Integer> q = new ArrayDeque<>();
        q.add(cur);
        visited[cur] = true;
        while(!q.isEmpty()){
            int poll  = q.poll();
            sb.append(poll).append(" ");
            for (int child : list[poll]) {
                if(!visited[child]) {
                    visited[child] = true;
                    q.add(child);
                }
            }
        }

    }


}
