// 시간복잡도  4 (+-*/)의 10 승 = 2 의 20 승
// 2의 50 승까지는 브루트포스(모든경우의 수) 가능

// 브루트포스 재귀로 풀이
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Main{

    static int[] op;
    static int n;
    static int MAX = Integer.MIN_VALUE;
    static int MIN = Integer.MAX_VALUE;
    static int[] arr;
    public static void main(String[] arg) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        arr = new int[n];
        String[] s = br.readLine().split(" ");
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(s[i]);
        }

        op = new int[4];
        // op -  0 : + , 1 : -,  2: *, 3 : -
        s = br.readLine().split(" ");
        for (int i = 0; i < 4; i++) {
            op[i] = Integer.parseInt(s[i]);

        }
        dfs(1, arr[0]);
        System.out.println(MAX);
        System.out.println(MIN);
    }

    static public void dfs(int idx,  int sum){
        if(idx == n) {
            MAX = Math.max(sum, MAX);
            MIN = Math.min(sum, MIN);
            return;
        }

        for(int i=0; i< op.length; i++) {
            op[i]--;
            if(op[i] >= 0){
                if(i == 0){
                    dfs(idx + 1, sum + arr[idx] );
                } else if (i == 1) {
                    dfs(idx + 1, sum - arr[idx] );
                } else if (i == 2) {
                    dfs(idx + 1, sum * arr[idx] );
                } else if (i == 3) {
                    int tmp = sum;
                    if (tmp < 0) {
                        tmp *= -1;
                        tmp /= arr[idx];
                        tmp *= -1;
                    } else {
                        tmp /= arr[idx];
                    }
                    dfs(idx + 1, tmp );
                }
            }
            op[i]++;
        }
    }
}
