import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;


class Main{

    static int n;
    static char[][] arr;
    static int[] dx = {0, 0, -1, +1};
    static int[] dy = {-1, +1, 0, 0};



    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        arr = new char[n][n];

        for (int i = 0; i < n; i++) {
            String s = br.readLine();
            for (int j = 0; j < n; j++) {
                arr[i][j] = s.charAt(j);
            }
        }



        StringBuilder sb = new StringBuilder();
        boolean[][] visit = new boolean[n][n];
        int cnt = 0; // 적록 구별 가능 카운팅
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if(visit[i][j] == false) {
                    visit[i][j] = true;
                    cnt++;
                    bfs(i, j, visit);
                }
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (arr[i][j] == 'R') {
                    arr[i][j] = 'G';
                }
            }
        }


        visit = new boolean[n][n];
        int cnt2 = 0; // 적록 구별 불가능 카운팅
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if(visit[i][j] == false) {
                    visit[i][j] = true;
                    cnt2++;
                    bfs(i, j,  visit);
                }
            }
        }
        sb.append(cnt).append(" ").append(cnt2);
        System.out.println(sb);

    }

    public static void bfs(int x, int y, boolean[][] visit){
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{x, y});
        while(!q.isEmpty()) {
            int[] t = q.poll();
            for (int i = 0; i < 4; i++) {
                int nx = t[0] + dx[i];
                int ny = t[1] + dy[i];
                if(nx >= 0 && ny >= 0 && nx < n &&  ny <n && visit[nx][ny] == false){
                    // 적록 색약 구별 가능
                    if(arr[t[0]][t[1]] == arr[nx][ny]){
                        visit[nx][ny] = true;
                        q.add(new int[]{nx, ny});
                    }
                }
            }

        }
    }


}

