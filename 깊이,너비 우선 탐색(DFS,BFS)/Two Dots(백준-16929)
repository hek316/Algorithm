import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    static int n;
    static int m;

    static char[][] arr;


    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = { 0, 0, -1, 1};

    static boolean ans = false;


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");

        n = Integer.parseInt(s[0]);
        m = Integer.parseInt(s[1]);

        arr = new char[n][m];

        for (int i = 0; i < n; i++) {
            String s1 = br.readLine();
            for (int j = 0; j < m; j++) {
                arr[i][j] = s1.charAt(j);
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                boolean[][] visit = new boolean[n][m];
                if(dfs(i, j, -1, -1, visit, 1)) {
                    ans = true;
                    break;
                }
            }
        }

        System.out.println(ans ? "Yes" : "No");

    }

    public static boolean dfs(int i, int j, int prei, int prej, boolean[][] visit, int cnt){
        if(visit[i][j] && cnt >=4) return true;
        visit[i][j] = true;
        for (int k = 0; k < 4; k++) {
            int nx = i + dx[k];
            int ny = j + dy[k];
            if(nx >= 0 && ny >=0 && nx < n && ny < m && arr[i][j] == arr[nx][ny] ){
                if(nx == prei && ny == prej) continue;
                if(dfs(nx, ny, i, j, visit, cnt+1)){
                    return true;
                }
            }
        }
        return false;
    }
}
