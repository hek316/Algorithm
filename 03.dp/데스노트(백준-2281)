import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;

class Main {



    static int n;
    static int width;
    static int[][]  dp;

    static int[] names;

    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");

        n = Integer.parseInt(s[0]);
        width = Integer.parseInt(s[1]);
        dp = new int[n][width+ 2];
        names = new int[n];
        for (int i = 0; i < n; i++) {
            names[i] = Integer.parseInt(br.readLine());
        }
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }

        int solve = solve(1, names[0] + 1);
        System.out.println(solve);

    }

    public static int solve(int idx, int usedCnt) { // idx 이름 순서
        // 기저 사례: 모든 단어를 처리한 경우
        if(idx == n) return 0; // 마지막 줄의 공백 비용은 계산하지 않음

        // 메모제이션
        if(dp[idx][usedCnt] != -1) {
            return dp[idx][usedCnt];
        }

        int left = width - usedCnt + 1;
        //현재 단어를 다음 줄에 넣는 경우
        int ret = solve(idx+1, names[idx] +1) + (left * left);

        //현재 단어를 이어붙이는 경우
        if(usedCnt + names[idx] <= width) {
            ret = Math.min(solve(idx+1, usedCnt + names[idx] + 1),  ret);
        }

        dp[idx][usedCnt] = ret;
        return dp[idx][usedCnt];
    }

}
