import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    static class Node{
        int left;
        int right;

        public Node(int left, int right) {
            this.left = left;
            this.right = right;
        }
    }
    static int n;
    static StringBuilder sb = new StringBuilder();
    static Node[] nodes;
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());


        nodes = new Node[27];
        while(n-- > 0) {

            String[] s = br.readLine().split(" ");
            String root = s[0];
            String left = s[1];
            String right = s[2];

            int root1 =root.charAt(0)-'A';

            int left1 = -1;
            if(!left.equals(".")) {
                left1 = left.charAt(0)-'A';
            }

            int right1 = -1;
            if(!right.equals(".")) {
                right1 = right.charAt(0)-'A';
            }

            nodes[root1] = new Node(left1, right1);

        }

        preOrder(0);
        sb.append("\n");

        midOrder(0);
        sb.append("\n");
        
        postOrder(0);
        System.out.println(sb);
    }



    public static void preOrder(int root) {
        sb.append((char)(root+'A'));
        if(nodes[root].left != -1) preOrder(nodes[root].left);
        if(nodes[root].right  != -1) preOrder(nodes[root].right);
    }

    public static void midOrder(int root) {
        if(nodes[root].left != -1) midOrder(nodes[root].left);
        sb.append((char)(root+'A'));
        if(nodes[root].right  != -1) midOrder(nodes[root].right);

    }

    public static void postOrder(int root) {
        if(nodes[root].left != -1) postOrder(nodes[root].left);
        if(nodes[root].right  != -1) postOrder(nodes[root].right);
        sb.append((char)(root+'A'));
    }


}
