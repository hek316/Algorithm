import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main {

    static int n;
    static int[][][] dp;
    static boolean[][][] visit;
    public static void main(String[] arg) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        int[] arr = new int[3];
        String[] s = br.readLine().split(" ");
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(s[i]);
        }

        dp = new int[61][61][61];
        visit = new boolean[61][61][61];


        int[][] dx = {{1, 3, 9} , {1, 9, 3}, {3, 1, 9}, {3, 9, 1}, {9, 3, 1}, {9, 1, 3}};


        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{arr[0], arr[1], arr[2]});

        while(!q.isEmpty()) {
            int[] t = q.poll();
            for (int i = 0; i < 6; i++) {
                int a = Math.max(t[0] - dx[i][0], 0);
                int b = Math.max(t[1] - dx[i][1], 0);
                int c = Math.max(t[2] - dx[i][2], 0);
                if(a == 0 && b ==0 &&  c==0) {
                    System.out.println(dp[t[0]][t[1]][t[2]] + 1);
                    return;
                }
                if (visit[a][b][c] == false) {
                    visit[a][b][c] = true;
                    dp[a][b][c] = dp[t[0]][t[1]][t[2]] + 1;
                    q.add(new int[] {a, b, c});
                }

            }
        }



    }
}
